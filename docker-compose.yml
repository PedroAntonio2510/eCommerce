services:
  api:
    build: ./api
    ports:
      - "8080:8080"
#    env_file:
#      - ./secret/api.env.secret
    environment:
      spring.profiles.active: production
    depends_on:
      rabbit-mq:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - backend

  notificacao:
    build: ./notification
#    env_file:
#      - ./secret/notification.env.secret
    environment:
      spring.profiles.active: production
    depends_on:
      rabbit-mq:
        condition: service_healthy
      api:
        condition: service_started
    networks:
      - backend

  payment:
    build: ./payment
    environment:
      spring.profiles.active: production
    depends_on:
      rabbit-mq:
          condition: service_healthy
      api:
        condition: service_started
    networks:
      - backend

  db:
    image: postgres:17.0
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "ecommerceapiDB", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: ecommerceapiDB
      POSTGRES_PASSWORD: 1234
    ports:
      - "5432:5432"
    networks:
      - backend

  rabbit-mq:
    image: rabbitmq:4.0.5-management
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      timeout: 5s
      interval: 5s
      retries: 3
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - backend

networks:
  backend:
    name: ecommerceApi